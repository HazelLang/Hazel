# 1 "test.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "test.c"
# 191 "test.c"
typedef enum {

        TOK_ILLEGAL = 0, TOK_ID, TOK_EOF, TOK_NULL, COMMENT, TOK___LITERALS_BEGIN, IDENTIFIER, INTEGER, BIN_INT, HEX_INT, INT8_LIT, INT16_LIT, INT32_LIT, INT64_LIT, UINT_LIT, UINT8_LIT, UINT16_LIT, UINT32_LIT, UINT64_LIT, TOK_FLOAT, FLOAT32_LIT, FLOAT64_LIT, FLOAT128_LIT, IMAG, RUNE, STRING, RAW_STRING, TRIPLE_STRING, TOK_TRUE, TOK_FALSE, TOK___LITERALS_END, TOK___OPERATORS_BEGIN, OPERATOR, PLUS, MINUS, MULT, SLASH, MOD, MOD_MOD, PLUS_PLUS, MINUS_MINUS, MULT_MULT, SLASH_SLASH, AT_SIGN, HASH_SIGN, QUESTION, TOK___COMP_OPERATORS_BEGIN, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL_TO, LESS_THAN_OR_EQUAL_TO, EQUALS_EQUALS, EXCLAMATION_EQUALS, TOK___COMP_OPERATORS_END, TOK___ASSIGNMENT_OPERATORS_BEGIN, EQUALS, PLUS_EQUALS, MINUS_EQUALS, MULT_EQUALS, SLASH_EQUALS, MOD_EQUALS, AND_EQUALS, OR_EQUALS, XOR_EQUALS, LBITSHIFT_EQUALS, RBITSHIFT_EQUALS, TILDA, TILDA_EQUALS, TOK___ASSIGNMENT_OPERATORS_END, TOK___ARROW_OPERATORS_BEGIN, EQUALS_ARROW, RARROW, LARROW, TOK___ARROW_OPERATORS_END, TOK___DELIMITERS_OPERATORS_BEGIN, LSQUAREBRACK, RSQUAREBRACK, LBRACE, RBRACE, LPAREN, RPAREN, TOK___DELIMITERS_OPERATORS_END, TOK___BITWISE_OPERATORS_BEGIN, LBITSHIFT, RBITSHIFT, AND, OR, EXCLAMATION, XOR, AND_NOT, AND_AND, OR_OR, TOK___BITWISE_OPERATORS_END, TOK___OPERATORS_END, TOK___SEPARATORS_BEGIN, COLON, COLON_COLON, SEMICOLON, COMMA, DOT, DDOT, ELLIPSIS, BACKSLASH, TOK___SEPARATORS_END, TOK___KEYWORDS_BEGIN, KEYWORD, ANY, AS, BEGIN, BREAK, CASE, CAST, CATCH, CLASS, CONST, CONTINUE, DO, DECL, DEFAULT, ENUM, ELSE, ELSEIF, EXCEPT, EXPORT, EXTERN, FINALLY, FOR, FROM, FUNC, IF, IMPORT, IN, INCLUDE, INLINE, ISA, MACRO, MAP, MATCH, MIXIN, MODULE, MUTABLE, NO_INLINE, NOT, NOT_IN, PRAGMA, RAISE, RANGE, RETURN, STRUCT, TRY, TUPLE, TYPE, TYPEOF, WHEN, WHERE, WHILE, UNION, USE, TOK___KEYWORDS_END, TOK_COUNT

} TokenKind;



static const char* tokenHash[] = {

        "", "TOK_ID", "TOK_EOF", "TOK_NULL", "COMMENT", "", "IDENTIFIER", "INTEGER", "BIN_INT", "HEX_INT", "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", "UINT64_LIT", "FLOAT", "FLOAT32_LIT", "FLOAT64_LIT", "FLOAT128_LIT", "IMAG", "RUNE", "STRING", "RAW_STRING", "TRIPLE_STRING", "TRUE", "FALSE", "", "", "", "+", "-", "*", "/", "%", "%%", "++", "--", "**", "//", "@", "#", "?", "", ">", "<", ">=", "<=", "==", "!=", "", "", "=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", "<<=", ">>=", "~", "~=", "", "", "=>", "->", "<-", "", "", "[", "]", "{", "}", "(", ")", "", "", "<<", ">>", "&", "|", "!", "^", "&^", "&&", "||", "", "", "", ":", "::", ";", ",", ".", "..", "...", "\\", "", "", "", "any", "as", "begin", "break", "case", "cast", "catch", "class", "const", "continue", "do", "decl", "default", "enum", "else", "elseif", "except", "export", "extern", "finally", "for", "from", "func", "if", "import", "in", "include", "inline", "isa", "macro", "map", "match", "mixin", "module", "mutable", "noinline", "not", "notin", "pragma", "raise", "range", "return", "struct", "try", "tuple", "type", "typeof", "when", "where", "while", "union", "use", "", ""

};

int main() {

}
